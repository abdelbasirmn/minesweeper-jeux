{"ast":null,"code":"import { INIT_BOARD, REVEAL_CELL, FLAG_CELL, RESET_GAME } from './actions';\nconst initialState = {\n  board: []\n};\nconst createBoard = () => {\n  // Create a 10x10 board with random mines\n  const board = Array(10).fill(null).map(() => Array(10).fill({\n    isRevealed: false,\n    isMine: false,\n    neighborCount: 0\n  }));\n\n  // Add mines\n  for (let i = 0; i < 10; i++) {\n    const row = Math.floor(Math.random() * 10);\n    const col = Math.floor(Math.random() * 10);\n    board[row][col].isMine = true;\n  }\n\n  // Calculate neighbor counts\n  for (let row = 0; row < 10; row++) {\n    for (let col = 0; col < 10; col++) {\n      if (!board[row][col].isMine) {\n        let count = 0;\n        for (let i = -1; i <= 1; i++) {\n          for (let j = -1; j <= 1; j++) {\n            const newRow = row + i;\n            const newCol = col + j;\n            if (newRow >= 0 && newRow < 10 && newCol >= 0 && newCol < 10) {\n              if (board[newRow][newCol].isMine) {\n                count++;\n              }\n            }\n          }\n        }\n        board[row][col].neighborCount = count;\n      }\n    }\n  }\n  return board;\n};\nconst revealBoard = (board, row, col) => {\n  if (board[row][col].isRevealed || board[row][col].isMine) {\n    return board;\n  }\n  board[row][col].isRevealed = true;\n  if (board[row][col].neighborCount === 0) {\n    for (let i = -1; i <= 1; i++) {\n      for (let j = -1; j <= 1; j++) {\n        const newRow = row + i;\n        const newCol = col + j;\n        if (newRow >= 0 && newRow < 10 && newCol >= 0 && newCol < 10) {\n          revealBoard(board, newRow, newCol);\n        }\n      }\n    }\n  }\n  return board;\n};\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INIT_BOARD:\n      return {\n        ...state,\n        board: createBoard()\n      };\n    case REVEAL_CELL:\n      return {\n        ...state,\n        board: revealBoard([...state.board], action.payload.row, action.payload.col)\n      };\n    case FLAG_CELL:\n      return {\n        ...state,\n        board: state.board.map((row, rowIndex) => row.map((cell, colIndex) => {\n          if (rowIndex === action.payload.row && colIndex === action.payload.col) {\n            return {\n              ...cell,\n              isFlagged: !cell.isFlagged\n            };\n          }\n          return cell;\n        }))\n      };\n    case RESET_GAME:\n      return {\n        ...state,\n        board: createBoard()\n      };\n    default:\n      return state;\n  }\n};\nexport default rootReducer;","map":{"version":3,"names":["INIT_BOARD","REVEAL_CELL","FLAG_CELL","RESET_GAME","initialState","board","createBoard","Array","fill","map","isRevealed","isMine","neighborCount","i","row","Math","floor","random","col","count","j","newRow","newCol","revealBoard","rootReducer","state","action","type","payload","rowIndex","cell","colIndex","isFlagged"],"sources":["C:/Users/User/minesweeper/src/redux/reducers.js"],"sourcesContent":["import {\r\n    INIT_BOARD,\r\n    REVEAL_CELL,\r\n    FLAG_CELL,\r\n    RESET_GAME,\r\n  } from './actions';\r\n  \r\n  const initialState = {\r\n    board: [],\r\n  };\r\n  \r\n  const createBoard = () => {\r\n    // Create a 10x10 board with random mines\r\n    const board = Array(10)\r\n      .fill(null)\r\n      .map(() => Array(10).fill({ isRevealed: false, isMine: false, neighborCount: 0 }));\r\n  \r\n    // Add mines\r\n    for (let i = 0; i < 10; i++) {\r\n      const row = Math.floor(Math.random() * 10);\r\n      const col = Math.floor(Math.random() * 10);\r\n      board[row][col].isMine = true;\r\n    }\r\n  \r\n    // Calculate neighbor counts\r\n    for (let row = 0; row < 10; row++) {\r\n      for (let col = 0; col < 10; col++) {\r\n        if (!board[row][col].isMine) {\r\n          let count = 0;\r\n          for (let i = -1; i <= 1; i++) {\r\n            for (let j = -1; j <= 1; j++) {\r\n              const newRow = row + i;\r\n              const newCol = col + j;\r\n              if (newRow >= 0 && newRow < 10 && newCol >= 0 && newCol < 10) {\r\n                if (board[newRow][newCol].isMine) {\r\n                  count++;\r\n                }\r\n              }\r\n            }\r\n          }\r\n          board[row][col].neighborCount = count;\r\n        }\r\n      }\r\n    }\r\n  \r\n    return board;\r\n  };\r\n  \r\n  const revealBoard = (board, row, col) => {\r\n    if (board[row][col].isRevealed || board[row][col].isMine) {\r\n      return board;\r\n    }\r\n    board[row][col].isRevealed = true;\r\n  \r\n    if (board[row][col].neighborCount === 0) {\r\n      for (let i = -1; i <= 1; i++) {\r\n        for (let j = -1; j <= 1; j++) {\r\n          const newRow = row + i;\r\n          const newCol = col + j;\r\n          if (newRow >= 0 && newRow < 10 && newCol >= 0 && newCol < 10) {\r\n            revealBoard(board, newRow, newCol);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n    return board;\r\n  };\r\n  \r\n  const rootReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n      case INIT_BOARD:\r\n        return {\r\n          ...state,\r\n          board: createBoard(),\r\n        };\r\n      case REVEAL_CELL:\r\n        return {\r\n          ...state,\r\n          board: revealBoard([...state.board], action.payload.row, action.payload.col),\r\n        };\r\n      case FLAG_CELL:\r\n        return {\r\n          ...state,\r\n          board: state.board.map((row, rowIndex) =>\r\n            row.map((cell, colIndex) => {\r\n              if (rowIndex === action.payload.row && colIndex === action.payload.col) {\r\n                return { ...cell, isFlagged: !cell.isFlagged };\r\n              }\r\n              return cell;\r\n            })\r\n          ),\r\n        };\r\n      case RESET_GAME:\r\n        return {\r\n          ...state,\r\n          board: createBoard(),\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  export default rootReducer;\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}